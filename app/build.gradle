apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    signingConfigs {
        release {
            if (System.getenv()["CI"]) {
                if (System.getenv()["TRAVIS_PULL_REQUEST"] == "false") {
                    storeFile file(System.getenv("STORE_FILE"))
                    storePassword System.getenv("STORE_PASSWORD")
                    keyAlias System.getenv("KEY_ALIAS")
                    keyPassword System.getenv("KEY_PASSWORD")
                }
            } else {
                storeFile file(STORE_FILE)
                storePassword STORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            }
        }
    }
    defaultConfig {
        applicationId "bin.xposed.Unblock163MusicClient"
        minSdkVersion 14
        // target Android P 之后，在安装过程中会对 APP 文件目录实行严格的 SELinux 限制，即使 makeWorkdReadable，其他 APP 也无法读取插件的任何配置文件
        targetSdkVersion 27
        versionCode 30
        versionName = "0.0.${versionCode}"
        archivesBaseName = "${applicationId}-${versionName}"
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compileOnly 'de.robv.android.xposed:api:53'
    compileOnly 'de.robv.android.xposed:api:53:sources'
    implementation 'com.annimon:stream:1.2.1'
    implementation 'com.gyf.immersionbar:immersionbar:2.3.2'
    implementation 'org.smali:dexlib2:2.2.6'
    implementation 'com.google.guava:guava:27.0.1-android'
    implementation project(':hotxposed')
}

afterEvaluate {
    installDebug.doLast {
//        updateVirtualXposedAPP.execute()
//        rebootVirtualXposedAPP.execute()
//        launchVirtualXposedAPP.execute()
        restartCloudMusic.execute()
    }
}

task updateVirtualXposedAPP(type: Exec) {
    def pkg = android.defaultConfig.applicationId
    commandLine android.adbExecutable, 'shell', 'am', 'broadcast', '-a', 'io.va.exposed.CMD', '-e', 'cmd', 'update', '-e', 'pkg', pkg
}

task rebootVirtualXposedAPP(type: Exec) {
    commandLine android.adbExecutable, 'shell', 'am', 'broadcast', '-a', 'io.va.exposed.CMD', '-e', 'cmd', 'reboot'
}

task launchVirtualXposedAPP(type: Exec) {
    def pkg = "com.netease.cloudmusic"
    commandLine android.adbExecutable, 'shell', 'am', 'broadcast', '-a', 'io.va.exposed.CMD', '-e', 'cmd', 'launch', '-e', 'pkg', pkg
    commandLine android.adbExecutable, 'shell', 'am', 'force-stop', pkg
}

task restartCloudMusic(type: Exec) {
    def pkg = "com.netease.cloudmusic"
    commandLine android.adbExecutable, 'shell', 'am', 'force-stop', pkg
    commandLine android.adbExecutable, 'shell', 'monkey', '-p', pkg, "1"
}

